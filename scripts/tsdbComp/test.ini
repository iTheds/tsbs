# Configure install path and file name
# Go and repository will be installed in this installPath
cfgfile="test.ini"
installPath="/usr/local/src/"

# Select OS type, ubuntu or centos
#[ubuntu|centos]
osType=ubuntu   

# When you first start this script, you must set installGoEnv/installDB/installTsbs to true.
# When you repeat execute tsdbComparison.sh or testTsbs.sh, you can set these to false

# Install test environment, when it is true, installGoEnv/installDB/installTsbs will take effect 
installEnvAll=true
# Install Go environment
#[true|false]
installGoEnv=true
# Install PostgreSQL/TimescaleDB/InfluxDB/TDengine
#[true|false]
installDB=true
# Install TSBS executable
#[true|false]
installTsbs=true

# Database ports
tdengine_port="6030"
influx_port="8086"
influx3_port="8181"
timescaledb_port="5432"

# Load and Query Parameters
# You must configure the machine IP and hostname of client and server.
# You must configure the machine password of the server.
clientIP="127.0.0.1"
clientHost="localhost"
serverIP="127.0.0.1"
serverHost="localhost"
serverPass="taosdata"

# What kind of test case you choose 
# [cputest | cpu | devops | iottest | iot | userdefined ]
# cputest|iottest: you can use minimal time to validate whether test scripts are correct
# cpu: you can execute test case of specified cpu-only scenario
# devops: you can execute test case of specified devops scenario
# iot: you can execute test case of specified iot scenario
# userdefined: when caseTypes is userdefined, the parameter of case takes effect.
# If you want to test cpu and iot case, you can set caseTypes="cpu iot"
caseTypes="cputest iottest"

# It takes effect when the caseTypes is userdefined
#[cpu-only | devops | iot]
case="cpu-only"

# Specify whether to perform load, query, or both
# [load | query | both]
operation_mode="both"

# Data and result root path
# You can check the real path in RootDir when executing scripts
loadDataRootDir="/data2/"
loadResultRootDir="/data2/"
queryDataRootDir="/data2/"
queryResultRootDir="/data2/"

# Load test parameters
load_ts_start="2016-01-01T00:00:00Z"
load_ts_end="2016-01-02T00:00:00Z"
load_number_workers="12"
load_batchsizes="10000"
load_scales="100 4000 100000 1000000 10000000"
#[TDengine|influx|timescaledb|TDengineStmt2|influx3]
load_formats="TDengine influx timescaledb TDengineStmt2 influx3"
load_fsync="3000"
vgroups="6"
triggers="1"
load_batch_size="10000"
# For test, you can set the following parameters
load_ts_end="2016-01-01T12:00:00Z"
load_scales="200"

# Query test parameters
# Duration time must be larger than 12h 
query_ts_start="2016-01-01T00:00:00Z"
query_load_ts_end="2016-01-02T00:00:00Z"
query_ts_end="2016-01-02T00:00:01Z"
query_number_wokers="8"
query_times_default="4000"
query_scales="100"
query_formats="TDengine influx timescaledb influx3"
reload_data="true"
query_debug="false"
query_load_batch_size="30000"
# For test case of cpu, you can set the following parameters
query_times_cpu="4000"
query_types_cpu_all="single-groupby-1-1-1 \
 single-groupby-1-1-12 \
 single-groupby-1-8-1 \
 single-groupby-5-1-1 \
 single-groupby-5-1-12 \
 single-groupby-5-8-1 \
 cpu-max-all-1 \
 cpu-max-all-8 \
 double-groupby-1 \
 double-groupby-5 \
 double-groupby-all \
 high-cpu-1 \
 high-cpu-all \
 groupby-orderby-limit \
 lastpoint"
# For test case of iot, you can set the following parameters
query_times_iot="10000"
query_types_iot_all="last-loc \
low-fuel \
high-load \
stationary-trucks \
long-driving-sessions \
long-daily-sessions \
avg-vs-projected-fuel-consumption \
avg-daily-driving-duration \
avg-daily-driving-session \
avg-load \
daily-activity \
breakdown-frequency"
# For test, you can set the following parameters
#query_load_ts_end="2016-01-01T12:00:00Z"
#query_ts_end="2016-01-01T12:00:01Z"
#query_scales="200"
#query_times_iot="10"
#query_times_cpu="10"

# Generate report
# [true|false]
report="true"
